config=$(cat)

#echo $config > /tmp/source_vars

aws_access_key_id=$(echo "$config" | jq -r ".source.access_key_id")
aws_secret_access_key=$(echo "$config" | jq -r ".source.secret_access_key")
aws_region=$(echo "$config" | jq -r ".source.region_name")

if [[ $aws_access_key_id && $aws_secret_access_key ]]; then
    export AWS_ACCESS_KEY_ID=$aws_access_key_id
    export AWS_SECRET_ACCESS_KEY=$aws_secret_access_key
    export AWS_DEFAULT_REGION=$aws_region
fi

namespace=$(echo "$config" | jq -r ".source.namespace")

if [ -z "$namespace" ]; then
    log_error "mandatory configuration 'source.namespace' not set"
    exit 1
fi

metric=$(echo "$config" | jq -r ".source.metric")
if [ -z "$metric" ]; then
    log_error "mandatory configuration 'source.metric' not set"
    exit 1
fi

value=$(echo "$config" | jq -r '.params | if has("value") then .value else 1 end')
#unit=$(echo "$config" | jq -r '.params | if has("unit") then .unit else "Count" end')
unit="Count"

dimensions="build_job_name=${BUILD_JOB_NAME},build_pipeline_name=${BUILD_PIPELINE_NAME},build_team_name=$BUILD_TEAM_NAME"
dimensions_provided=$(echo "$config" | jq -r '.params.dimensions | to_entries | map([.key,.value] | join("=")) | join(",")')

if [ "$dimensions_provided" ]; then
  dimensions="${dimensions},${dimensions_provided}"
fi

version=$(echo "$config" | jq -r ".version")
