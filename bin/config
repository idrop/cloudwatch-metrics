function parse_aws_credentials() {
  aws_access_key_id=$(echo "$config" | jq -r '.source.aws_access_key_id')
  aws_secret_access_key=$(echo "$config" | jq -r '.source.aws_secret_access_key')
  aws_region=$(echo "$config" | jq -r '.source.aws_region')

  if [ "${aws_access_key_id}" != null ]; then
    export AWS_ACCESS_KEY_ID=$aws_access_key_id
  fi

  if [ "${aws_secret_access_key}" != null ]; then
    export AWS_SECRET_ACCESS_KEY=$aws_secret_access_key
  fi

  if [ "${aws_region}" != null ]; then
    export AWS_DEFAULT_REGION=$aws_region
  fi
}

function parse_namespace() {
  namespace=$(echo "$config" | jq -r ".source.namespace")

  if [ "${namespace}" == null ]; then
    log_error "mandatory configuration 'source.namespace' not set"
    exit 1
  fi
}

function parse_metric() {
  metric=$(echo "$config" | jq -r ".source.metric")
  if [ "${metric}" == null ]; then
    log_error "mandatory configuration 'source.metric' not set"
    exit 1
  fi
}

function parse_dimensions() {

  # default dimensions from metadata
  dimensions="build_job_name=${BUILD_JOB_NAME},build_pipeline_name=${BUILD_PIPELINE_NAME},build_team_name=$BUILD_TEAM_NAME"

  if [ $(echo "$config" | jq -r '.params | has("dimensions")') ]; then
    dimensions_provided=$(echo "$config" | jq -r '.params.dimensions | to_entries | map([.key,.value] | join("=")) | join(",")')
    if [ "$dimensions_provided" != null ]; then
      dimensions="${dimensions},${dimensions_provided}"
    fi
  fi
}

function parse_value() {
  value=1
  if [ $(echo $config | jq -r 'has("params")') ]; then
    value=$(echo "$config" | jq -r '.params | if has("value") then .value else 1 end')
  fi
}

config=$(cat)
parse_aws_credentials
parse_namespace
parse_metric
log "b4 dims"
parse_dimensions
log "after dims"
parse_value
unit="Count"
